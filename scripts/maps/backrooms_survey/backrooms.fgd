@BaseClass = Targetname
[
    targetname(target_source) : "Name"
]

@BaseClass = Angles
[
    angles(string) : "Pitch Yaw Roll (X Y Z)" : "0 0 0"
]

@BaseClass base( Targetname ) = CToggleState
[
    spawnflags(Flags) =
    [
        1: "Start Off" : 0
    ]
]

@BaseClass = CFireTargetsWithoutTarget
[
    m_usetype(choices) : "Trigger State" : 3 =
    [
        0: "Off"
        1: "On"
        3: "Toggle"
        2: "Set"
    ]
    m_delay(float) : "Delay Before Trigger"
    m_killtarget(target_destination) : "Kill Target"
]

@BaseClass base( CFireTargetsWithoutTarget ) = CFireTargets
[
    target(target_destination) : "Target" : "" : "Fire one or multiple targets separated by a semicolon 'target1;target2' you can also set a custom trugger type for each of them for example 'trigger1#1;trigger2#1;trigger3#2' if not set we'll use 'm_usetype'"
]

@PointClass base( CToggleState, CFireTargetsWithoutTarget ) = env_info : "environment information"
[
    spawnflags(Flags) =
    [
        2: "Don't show glow sprite" : 0
    ]

    m_information(string) : "Information" : "" : "If the string ends with '.txt' it will open a external file located in scripts/maps/backrooms_survey/data/ with the given name."
    name(string) : "Name in menu" : ""

    m_watch_time(float) : "Picture watch time" : 10 : "Time to watch this entity's pictures"

    m_trigger_on_picture(target_destination) : "[Trigger] when pictured" : "" : "Trigger when a picture is taken. this happen only once for each player. the player is the activator"
    m_trigger_on_watch(target_destination) : "[Trigger] when watch" : "" : "Trigger when a the player is watching the picture and reading the information. the player is the activator"

    target(string) : "[Target] Entity to render when picturing" : "" : "This uses env_render_individual to apply specific rendering settings"
    target_rendermode(choices) : "[Target] Render Mode" : -1 =
    [
        -1 : "Don't apply anything"
        0: "Normal"
        1: "Color"
        2: "Texture"
        3: "Glow"
        4: "Solid"
        5: "Additive"
    ]
    target_renderamt(integer) : "[Target] FX Amount (1 - 255)"
    target_rendercolor(color255) : "[Target] FX Color (R G B)"
    target_renderfx(choices) : "[Target] Render FX" : -1 =
    [
        -1 : "Don't apply anything"
        0: "Normal"
        1: "Slow Pulse"
        2: "Fast Pulse"
        3: "Slow Wide Pulse"
        4: "Fast Wide Pulse"
        9: "Slow Strobe"
        10: "Fast Strobe"
        11: "Faster Strobe"
        12: "Slow Flicker"
        13: "Fast Flicker"
        5: "Slow Fade Away"
        6: "Fast Fade Away"
        7: "Slow Become Solid"
        8: "Fast Become Solid"
        14: "Constant Glow"
        15: "Distort"
        16: "Hologram (Distort + fade)"
        17: "Dead Player (DONT USE!)"
        18: "Explode (Garg Like)"
        19: "Glow Shell"
        20: "ClampMinScale (Sprites)"
    ]

    glow_sprite(sprite) : "[Sprite] Sprite Name" : "" : "Custom sprite to display at position. if empty will use sprites/glow01.spr"
    sprite_rendermode(choices) : "[Sprite] Render Mode" : -1 =
    [
        -1 : "Don't apply anything"
        0: "Normal"
        1: "Color"
        2: "Texture"
        3: "Glow"
        4: "Solid"
        5: "Additive"
    ]
    sprite_renderamt(integer) : "[Sprite] FX Amount (1 - 255)"
    sprite_rendercolor(color255) : "[Sprite] FX Color (R G B)"
]

@PointClass base( CToggleState, CFireTargetsWithoutTarget ) = env_camera_render : "Renders and solidify a entity when gets pictured.."
[
    m_trigger_on_picture(target_destination) : "[Trigger] when pictured" : "" : "Trigger when a picture is taken. this will happen more than once if the entity has time to render > -1. the player is the activator"
    target(string) : "Target entity" : "" : ""
    m_wait(float) : "Time to render (0 = keep visible)" : "0.0"
    spawnflags(Flags) =
    [
        2: "Make non-solid" : 1 : "If set. the target entity will be non-solid until it's pictured"
    ]
]

@PointClass base( CToggleState, Angles, CFireTargets, ) = info_vanisher_destination : "npc vanisher's destinations"
[
]

@PointClass base( CToggleState ) = npc_vanisher : "npc vanisher"
[
    m_min_cooldown(integer) : "Minimun cooldown time" : 1200 : "Minimun cooldown. this is not random. based on player count, the greater the player count the lower the spawn time will be. i'e with 32 players. THIS is the cooldown"
    m_max_cooldown(integer) : "Maximun cooldown time" : 6000 : "Maximun cooldown. this is not random. based on player count, the greater the player count the lower the spawn time will be. i'e with only one player. THIS is the cooldown"
    m_retire_time(integer) : "Idle time until retire" : 10 : "Time to keep roaming until retire. this happens when the monster hp reach 0"
    m_health(integer) : "Health until vanish" : 10 : "When 0. the monster waits for 'Idle time until retire' then retires and is removed from the world. then spawn again in the proper cooldown."
    m_frags(integer) : "Frags per health state" : 100 : "0.1 is substracted every frame if the monster lost sight of his enemy. once reach 0 it will decrease 1 of health"
    m_maxspeed(integer) : "Maximun framerate speedup" : 3.0f : "This is the maximun value for framerate to set when the entity is getting lower and lower on health"
]

@PointClass base( CToggleState ) color(196 195 192) = env_fog_custom : "Custom Fog Field"
[
    m_type(choices) : "Fog type" : 0 =
    [
        0: "All players on trigger"
        1: "Activator only on trigger"
        2: "Think on radious (Set radius)"
    ]

    m_radius(integer) : "Radius" : 1024 : "If m_type is 2. triggering the entity will toggle the state to on/off. players in within this range will get the fog if the entity is on."
    m_color(color255) : "Fog Color (RGB)" : "0 0 0"
    m_distance_start(integer) : "Start Distance" : 128
    m_distance_end(integer) : "End Distance" : 1024
]
